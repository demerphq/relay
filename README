simple(~500 lines) socket<->socket relay that listens on
unix/udp and enqueues packets into one or more workers which
send them to their destination. If the remote socket is tcp
then it uses TCP_CORK on one streaming tcp connection to send
its data.

install:
    $ git clone https://github.com/jackdoe/relay
    $ cd relay
    $ make
    $ # and then run ./bin/relay 
usage:
relay local_socket fallback_socket worker_socket ....

for exmple:
relay /tmp/relay.sock udp@events-fallback.example.com:112233 \
    tcp@events-0.example.com:112233 tcp@events-1.example.com:112233

The enqueuement attempt on each worker's thread (in case
someone's queue is full or the worker is in aborted state) until
the packet is enqueued.

If all worker threads fail the packet is enqueued in the fallback
worker's queue.

Each thread tries to send the packet, and if it fails it tries
to requeue it into other threads (except if this thread is the
fallback, thenwe exit with error) and then it puts itself into
abort state, while it attempts to reconnect.

listener socket can be only DGRAM udp/unix.

packet \                         
packet  |- relay -> i++ % workers - picks next worker and adds
packet /                          - packet to its queue
                              
worker(a) 
 -> process_queue (poll/cond wait)
    -> send packets
        -> if disaster happens (unable to send packet) then
           pick other worker(b) to process my queue.
           -> if no worker is found then attempt to enqueue in
              fallback worker's queue

           (a) attempts to reconnect to his target server forever.
        -> otherwise goto process_queue;
                    
            
                 
testing:
    $ cd relay/test
    $ ./setup.sh
    # after testing is done you can see the results
    $ ./stat.sh  | sort -n -t'-' -k 2

legend:
    po = polling
    sp = spinlock
    ga = garbage reuse
    ad = array data (data[65535] instead of *data)

    result-packet_size-relay-flags:packets_per_second ... second_best ...

config:
everything after first # is comment
example config file (lets say /etc/relay.conf):

    udp@localhost:12344 #local
    # tcp@localhost:12345 old fallback
    sock/fallback.sock #fallback
    tcp@relay-1:1111 
    tcp@relay-2:1111 
    tcp@relay-3:1111 
    tcp@relay-4:1111 

run app with: relay /etc/relay.conf

If you want to change something for example relay-4 with relay-5, you
have to edit the config file and just killall -1 relay, this will
close/reopen all connections (including fallback).


